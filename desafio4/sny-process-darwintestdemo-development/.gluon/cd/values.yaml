# Default values for darwin micro-java chart.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

## Active
active: online

## @section Common parameters

## @param commonLabels [object] Labels to add to all deployed objects
##
commonLabels: {}
## @param commonAnnotations [object] Annotations to add to all deployed objects
##
commonAnnotations: {}
## @param podLabels [object] Extra labels for the micro service pods
## Ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
##
podLabels: {}
## @param podAnnotations [object] Annotations for the micro service pods
## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
##
podAnnotations: {}

## Darwin Micro Service image version
## @param image.registry darwin micro image registry
## @param image.repository darwin micro image name
## @param image.tag darwin micro image tag
## @param image.digest darwin micro image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
# Here is an example file for deploying a Darwin micro-service with the micro-java helm chart.
# It is necessary to reference this file in the deployment.yaml
# Documentation of all available parameters can be found at
#   https://gluon.gs.corp/community/docs/latest/capabilities/darwin/darwin-java/current/darwin-helm/
# This example has the minimum necessary parameters to be able to perform the deployment.
# Please update the values with the correct ones for your project.
image:
  ## @param image.registry micro image registry
  repository: ${PROJECT}/${APPLICATION_NAME}
  ## @param image.repository micro image name
  # With ${REGISTRY} placeholder this will be replaced by the registry value of
  # cluster properties block for each region
  registry: ${REGISTRY}
  ## @param image.tag micro image tag
  ## Use ${TAG_VERSION} for the value will use the same version of pom.xml.
  tag: ${TAG_VERSION}
  digest: ""
  ## @param image.pullPolicy darwin micro image pull policy
  ## Specify a imagePullPolicy
  ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
  ## ref: https://kubernetes.io/docs/user-guide/images/#pre-pulling-images
  ##
  pullPolicy: IfNotPresent

## @param replicaCount Number of replicas of the micro service pod
##
replicaCount: 1

## @param lifecycle [object] Override default micro service container hooks
## If you do not set this property, the default hook is:  `{lifecycle: {preStop: {exec: {command: [sleep 120]}}}}`
##
lifecycle: {}

## @param terminationGracePeriodSeconds In seconds, time the given to the pod needs to terminate gracefully
## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods
##
terminationGracePeriodSeconds: 300

## Darwin Micro Service pods' Security Context
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
## @param podSecurityContext.enabled Enable security context for the pods
## @param podSecurityContext.fsGroup Set Darwin Micro Service pod's Security Context fsGroup
## e.g:
##   podSecurityContext:
##     enabled: true
##     fsGroup: 1001
##
podSecurityContext:
  enabled: false

## Darwin Micro Service containers' Security Context
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
## @param containerSecurityContext.enabled Enable Darwin Micro Service containers' Security Context
## @param containerSecurityContext.runAsUser Set Darwin Micro Service containers' Security Context runAsUser
## @param containerSecurityContext.runAsNonRoot Set Darwin Micro Service containers' Security Context runAsNonRoot
## @param containerSecurityContext.allowPrivilegeEscalation Force the child process to be run as nonprivilege
## e.g:
##   containerSecurityContext:
##     enabled: true
##     runAsUser: 1001
##     runAsNonRoot: true
##     allowPrivilegeEscalation: false
##
containerSecurityContext:
  enabled: false

## Darwin Micro Service pods' Node Selector
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/assign-pods-nodes/
## @param podNodeSelector.enabled Enable node selection for the pods
## @param podNodeSelector.{labelName1} Node label name1 and value1
## @param podNodeSelector.{labelName2} Node label name2 and value2
## ...
## e.g:
##   podNodeSelector:
##     enabled: true
##     work_type: Gluon-app
##     otherNodeLabel: otherNodeLabel-value
##
podNodeSelector:
  enabled: false

## Configures the ports microservice listens on
## @param containerPorts.http Sets http port inside container
## @param containerPorts.https Sets https port inside container
##
containerPorts:
  http: 8080
  https: 8443

## @param extraContainerPorts Array of additional container ports for the container
## e.g:
## extraContainerPorts:
##   - name: grpc
##     containerPort: 4317
##
extraContainerPorts: []

## darwin microservices containers resource requests and limits
## ref: https://kubernetes.io/docs/user-guide/compute-resources/
## @param resources.limits [object] The resources limits for the etcd container
## @param resources.requests [object] The requested resources for the etcd container
##
resources:
  ## Example:
  ## limits:
  ##    cpu: 500m
  ##    memory: 1Gi
  ##
  limits:
    memory: 2G
    cpu: 1000m
  requests:
    memory: 500M
    cpu: 200m

## @param updateStrategy.rollingUpdate deployment rolling update configuration parameters
## ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
## Note: Set to Recreate if you use persistent volume that cannot be mounted by more than one pods to make sure the pods is destroyed first.
## E.g:
## updateStrategy:
##  type: RollingUpdate
##  rollingUpdate:
##    maxSurge: 25%
##    maxUnavailable: 25%
##
updateStrategy:
  type: RollingUpdate
  rollingUpdate: {}

## Configure extra options for liveness probe
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#configure-probes
## @param livenessProbe.enabled Enable livenessProbe by default /actuator/health/liveness 
## @param livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
## @param livenessProbe.periodSeconds Period seconds for livenessProbe
## @param livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
## @param livenessProbe.failureThreshold Failure threshold for livenessProbe
## @param livenessProbe.successThreshold Success threshold for livenessProbe
##
livenessProbe:
  enabled: true
  failureThreshold: 3
  initialDelaySeconds: 200
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 1

## Configure extra options for readiness probe
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#configure-probes
## @param readinessProbe.enabled Enable readinessProbe, by default /actuator/health/readiness
## @param readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
## @param readinessProbe.periodSeconds Period seconds for readinessProbe
## @param readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
## @param readinessProbe.failureThreshold Failure threshold for readinessProbe
## @param readinessProbe.successThreshold Success threshold for readinessProbe
readinessProbe:
  enabled: true
  failureThreshold: 3
  initialDelaySeconds: 15
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 1

## @param customLivenessProbe [object] Override default liveness probe
##
customLivenessProbe: {}

## @param customReadinessProbe [object] Override default readiness probe
##
customReadinessProbe: {}

## @param extraEnvVars Extra environment variables to be set on Node container
## For example:
##  - name: BEARER_AUTH
##    value: true
##  - name: DARWIN_CM_KEY
##    valueFrom:
##      configMapKeyRef:
##        name: "cm4"
##        key: LOGGING_ROOT_LEVEL
##        optional: false
##  - name: DARWIN_SECRET_KEY
##    valueFrom:
##      secretKeyRef:
##        name: "datagrid-app"
##        key: "application-password"
##        optional: false
##
extraEnvVars: []

## @param extraEnvVarsCM Name of existing ConfigMap containing extra environment variables
##
extraEnvVarsCM:

## @param extraEnvVarsSecret Name of existing Secret containing extra environment variables
##
extraEnvVarsSecret:

## @param extraVolumes Optionally specify extra list of additional volume for the container(s)
## For example:
## - name: data
##   persistentVolumeClaim:
##      claimName: test-volumes
##
extraVolumes: []

## @param extraVolumeMounts Optionally specify extra list of additional volumeMounts for the container(s)
## For example:
## - mountPath: /opt/test
##   name: data
##
extraVolumeMounts: []

## @param controller.initContainers Add additional init containers to the Controller pods
## ref: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
## E.g:
## initContainers:
##   - name: your-image-name
##     image: your-image
##     imagePullPolicy: Always
##     ports:
##       - name: portname
##         containerPort: 1234
##
initContainers: []

## @section service configuration
##
service:
  type: ClusterIP
  ## @param service.ports.http Service HTTP port
  ## @param service.ports.https Service HTTPS port
  ##
  ports:
    http: 8080
    https: 8443
  targetPort:
    http: 8080
    https: 8443
  ## @param service.annotations [object] Additional annotations for the service of the micro
  ##
  annotations: {}

## @section server TLS configuration

## TLS configuration
##
ssl:
  ## @param ssl.enabled Enable init container that generate the truststore and keystore
  ##
  enabled: false
  ## @param ssl.image.registry Init container cert-store-generation registry name
  ## @param ssl.image.repository Init container cert-store-generation image name
  ## @param ssl.image.tag Init container cert-store-generation image tag

  image:
    registry: registry.global.ccc.srvb.bo.paas.cloudcenter.corp
    repository: produban/init-certs-container
    tag: 1.0.8.RELEASE
    ## @param ssl.image.pullPolicy Init container cert-store-generation image pull policy
    ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
    ## ref: https://kubernetes.io/docs/user-guide/images/#pre-pulling-images    
    pullPolicy: IfNotPresent
  ## Init container resource requests and limits
  ## ref: https://kubernetes.io/docs/user-guide/compute-resources/
  ## If you do want to specify resources, uncomment the following
  ## lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  ## @param ssl.resources.limits [object] Init container ssl- resource  limits
  ## @param ssl.resources.requests [object] Init container cert-store-generation resource requests
  ##
  resources:
    ## Example:
    ## limits:
    ##    cpu: 500m
    ##    memory: 1Gi
    ##
    limits: {}
    ## Examples:
    ## requests:
    ##    cpu: 100m
    ##    memory: 128Mi
    ##
    requests: {}
  ## @param ssl.keystorePassword Password for the keystore to create. If no value is specified, a random password is generated.
  ##
  keystorePassword: ""
  ## @param ssl.truststorePassword Password for the truststore to create. If no value is specified, a random password is generated.
  ##
  truststorePassword: ""

## @section Darwin configuration

## Darwin Framework parameters
##
darwin:
  ## @param darwin.gitRepo. Git repository with the source code of the microservice.
  ## Example value: `https://github.alm.europe.cloudcenter.corp/sanes-darwin-poc/poc-certificates.git`
  gitRepo: ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}
  ## @param darwin.region. Cluster identifier.
  ## Possible values: `""`, `bo1`, `bo2`, `weu1.az` or `weu2.az`
  region: my-deploy-region
  ## @param darwin.sufix. Suffix to blue green deployments. 
  ## Possible values: `""`, `-b` or `-g`  
  suffix: ""
  logging_level_root: INFO
  tz: Europe/Madrid
  ## @param darwin.configType Allows to set the configuration from ConfigMap or Configuration Service
  ## It indicates the location from which the configuration is retrieved.
  ## Four possible values are allowed:
  ##  - "cm" creates a Kubernetes ConfigMap with the name cm-{app_name}. It will be mounted.
  ##  - "secret" creates a Kubernetes Secret with the name secret-{app_name}. It will be mounted.
  ##  - "cm-secret" creates a Kubernetes ConfigMap with name cm-{app_name} and a Kubernetes Secret with name
  ##     secret-{app_name}. They will be mounted.
  ##  - "configserver" to use Spring Cloud Configuration Server.
  configType: cm
  ## @param darwin.technologyVersion. JRE version of the image.
  ## Possible values: `11`, `17`, `21`, or `native`
  technologyVersion: 17
  ## @param darwin.version. Darwin Framework Version.
  ## Examples values: `3.0.1-RELEASE`, `3.1.0-RELEASE`, `3.2.0-RELEASE`
  version: my-darwin-project-darwin-framework-version
  ## Literal file and internalization configuration
  ##
  i18n:
    ## @param i18n.enabled Allow customizing the internationalization files.
    ##
    enabled: false
    ## @param i18n.path Define the path to store the literal and internationalization files
    path: /etc/i18n
    ## @param i18n.prefix Define the internalization files prefix. If the file name is errors_en.properties, the prefix is errors.
    prefix: errors
  spring:
    profiles: cert
    cloud_config:
      failfast: true
      # Values to connect with Configuration Service
      uri_http: http://configuration-service${darwin.suffix}:8080
      uri_https: https://configuration-service${darwin.suffix}.${PROJECT_NAME}.svc.cluster.local:8443
      username:
      password:
      retry:
        initialInterval : 3000
        maxInterval : 6000
        maxAttempts : 10
  java:
    opts_ext: "-Djava.security.egd=file:/dev/./urandom -Dfile.encoding=UTF-8 -XX:ActiveProcessorCount=2 -XX:MaxRAMPercentage=60.0 -XX:+UseParallelGC"
    parameters:
